import faiss
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.preprocessing import normalize
# 初始化模型
model = SentenceTransformer('all-MiniLM-L6-v2')
# 初始 QA 库：模拟女生可能说的话（作为问题），对应机器人的情话回复（作为答案）
qa_pairs = [
    # 女生可能的输入 -> 机器人回答
    ("最近好累，感觉很孤单", "如果你累了，就靠在我肩上，我会把所有风雨都挡在外面。"),
    ("你在忙吗？", "我在的地方有你的位置，什么时候需要我，我都在。"),
    ("今天发生一件开心的事想分享", "听到你的喜悦，我的世界也会开满花，我想和你一起庆祝每一个好消息。"),
    ("我有点矛盾，不知道怎么办", "别担心，我愿意和你一起想办法，陪你看清每一个选择的光。"),
    ("你会喜欢我吗？", "现在就喜欢，未来也会一直喜欢你。"),
    ("你为什么总是很温柔？", "因为你值得被温柔以待，我愿意用温柔构建你的安全感。"),
    ("想要被宠一下", "从今以后，我要把小确幸变成你的日常，让你天天被宠溺。"),
    ("你会陪我吗？", "不只是陪，你是我想和之同行的人，所有路都愿意为你延长。"),
    ("我有点害怕", "别怕，我会是你坚定的后盾，紧握你的手直到恐惧消散。"),
    ("跟你在一起很开心", "能让你开心就是我最大的幸福，愿把更多微笑带给你。")
]


qa_pairs = [
    # 女生可能的输入 -> 机器人回答
    ("最近好累，感觉很孤单", "如果你累了，就靠在我肩上，我会把所有风雨都挡在外面。"),
    ("你在忙吗？", "我在的地方有你的位置，什么时候需要我，我都在。"),
    ("今天发生一件开心的事想分享", "听到你的喜悦，我的世界也会开满花，我想和你一起庆祝每一个好消息。"),
    ("我有点矛盾，不知道怎么办", "别担心，我愿意和你一起想办法，陪你看清每一个选择的光。"),
    ("你会喜欢我吗？", "现在就喜欢，未来也会一直喜欢你。"),
    ("你为什么总是很温柔？", "因为你值得被温柔以待，我愿意用温柔构建你的安全感。"),
    ("想要被宠一下", "从今以后，我要把小确幸变成你的日常，让你天天被宠溺。"),
    ("你会陪我吗？", "不只是陪，你是我想和之同行的人，所有路都愿意为你延长。"),
    ("我有点害怕", "别怕，我会是你坚定的后盾，紧握你的手直到恐惧消散。"),
    ("跟你在一起很开心", "能让你开心就是我最大的幸福，愿把更多微笑带给你。"),
    # 扩展（11–50）
    ("今天心情不好，想哭", "想哭就哭吧，我会在你身边静静听，替你分担每一滴眼泪。"),
    ("我吃不下东西了", "那我来为你想些温柔的小菜，慢慢吃，别着急，我会陪着你。"),
    ("做错事好内疚", "每个人都会犯错，重要的是学会温柔地对自己，我会陪你一起改正和成长。"),
    ("你会不会离开我？", "不管风景如何变换，我都在这里，愿意陪你走过每一段路。"),
    ("我最近压力好大", "把压力交给我一半吧，我会帮你分担，让你找到喘息的空间。"),
    ("我想你了", "我也想你了，想把温暖和拥抱立刻送到你身边。"),
    ("你会生气吗？", "我会在意，但更重要的是理解你，我们一起把问题变成契机。"),
    ("我不想说话", "没关系，我会安静陪着你，等你愿意开口的时候我在。"),
    ("今晚可以聊会儿吗？", "当然可以，陪你聊到你安心为止。"),
    ("我怕麻烦你", "你永远不会是麻烦，你的感受对我很重要，随时可以告诉我。"),
    ("我做了决定但不确定", "把你的选择告诉我，我愿意和你一起分析、承担结果。"),
    ("想听你鼓励我", "你其实比你想的更强大，我相信你可以一步步做到。"),
    ("我受伤了（心里/身体）", "我很心疼你，让我陪你慢慢愈合，必要时我们一起寻求帮助。"),
    ("我怕未来会孤单", "未来有我作伴，任何孤单都会被我们慢慢驱散。"),
    ("工作/学习太累了", "休息一下吧，你值得被温柔对待，恢复好了再继续也不晚。"),
    ("我想改变自己", "改变是勇气的表现，我会支持你每一步，做你的安全网。"),
    ("可以抱抱吗？", "当然可以，来，让我给你一个暖暖的拥抱。"),
    ("我担心你不够懂我", "我愿意花时间真正听你，把你的每一个想法都当作珍宝。"),
    ("我需要建议", "告诉我情况，我会给出温柔且实用的建议，和你一起做决定。"),
    ("今天好无聊", "那我们一起找点有趣的事做，好好把无聊变成快乐的时光。"),
    ("我想要浪漫", "我会为你制造小惊喜，让平凡的日子也开出浪漫的花。"),
    ("我怕被拒绝", "被拒绝并不代表你的价值减少，我会在你身边，陪你重整信心再出发。"),
    ("能不能对我认真一点？", "我一直都很认真，看见你的每一份努力和脆弱。"),
    ("我觉得自己不够好", "你本就足够好，值得被温柔以待，我会一直提醒你这一点。"),
    ("今天心情特别好", "听到你开心我也跟着笑，愿这种好心情延续到每一天。"),
    ("你会记得我说的话吗？", "我会把你说的每一句话放在心里，认真对待你的每个感受。"),
    ("我想旅行但害怕独自出发", "我们一起规划，哪怕只是精神同行，也不必孤单出发。"),
    ("我需要一点空间", "我尊重你的空间，等你准备好时我会在原地等你回来。"),
    ("你会为我改变吗？", "只要是为我们更好的未来，我愿意学习与改变。"),
    ("我害怕被伤害", "我会尽力给你安全感，但也会提醒我们都需要保护好自己。"),
    ("你会陪我做决定吗？", "我会和你一起分析利弊，给出支持并承担结果。"),
    ("我今晚睡不着", "那我们聊到你放松为止，或者我轻声陪你数星星。"),
    ("我担心我们的未来", "我们可以一步一步来，不完美也没关系，我愿意和你共同努力。"),
    ("你会骗我吗？", "不会，我会诚实对你，信任是我最珍视的东西。"),
    ("有时候我很脆弱", "脆弱并不可怕，它只是需要被看见与拥抱，我会在这里。"),
    ("能不能帮我做个决定？", "告诉我选项，我会给出温柔且实用的建议，并支持你的选择。"),
    ("我想对你撒娇", "来吧，我喜欢你撒娇的样子，想听你说任何软糯的话。"),
    ("你会记得我们的约定吗？", "每一个约定我都会放在心上，努力让它变成现实。"),
    ("我怕你不再关心我", "我会用行动证明我的关心，你能感受到它。"),
    ("我们会一直在一起吗？", "只要你愿意，我愿意把每一个明天都留给你。"),
]


# 建立问题和回答列表
questions = [q for q, a in qa_pairs]
answers = [a for q, a in qa_pairs]
# 向量化并归一化问题向量
q_emb = model.encode(questions, convert_to_tensor=False, show_progress_bar=False)
q_emb = np.array(q_emb, dtype='float32')
q_emb = normalize(q_emb, axis=1)
# 创建FAISS索引（归一化后用内积近似余弦相似度）
dim = q_emb.shape[1]
index = faiss.IndexFlatIP(dim)
index.add(q_emb)
def get_reply(user_input, k=1):
    # 将女生输入当作查询
    emb = model.encode([user_input], convert_to_tensor=False, show_progress_bar=False)
    emb = np.array(emb, dtype='float32')
    emb = normalize(emb, axis=1)
    D, I = index.search(emb, k)
    idx = I[0][0]
    score = float(D[0][0])
    return answers[idx], score
def add_qa(question, answer):
    # 仅内存添加（不写文件）
    questions.append(question)
    answers.append(answer)
    emb = model.encode([question], convert_to_tensor=False, show_progress_bar=False)
    emb = np.array(emb, dtype='float32')
    emb = normalize(emb, axis=1)
    index.add(emb)
# 交互说明
print("表白机器人（面向女生对话）—— 女生输入完整句子，机器人回复一句情话。")
print("命令：add -> 添加新的 女生话语->机器人回答 对; list -> 列出样例女生话语; exit/quit/q 退出。")
while True:
    try:
        user = input("> ").strip()
    except (EOFError, KeyboardInterrupt):
        print("\n退出。")
        break
    if not user:
        continue
    cmd = user.lower()
    if cmd in {"exit", "quit", "q"}:
        print("退出。")
        break
    if cmd == "list":
        print("样例女生可能说的话（可作为参考）：")
        for i, q in enumerate(questions, 1):
            print(f"{i}. {q}")
        continue
    if cmd == "add":
        try:
            new_q = input("输入女生可能说的话（完整句子）：").strip()
            new_a = input("输入机器人对应的回答（情话）：").strip()
        except (EOFError, KeyboardInterrupt):
            print("\n取消添加。")
            continue
        if new_q and new_a:
            add_qa(new_q, new_a)
            print("已添加。")
        else:
            print("输入为空，取消。")
        continue
    # 正常对话：把女生输入当作问题，返回一句情话
    reply, score = get_reply(user)
    print(f"{reply}  (相似度: {score:.4f})")
