"""
This is a Flask web application that implements a simple photo hosting service. It uses the sqlite3 module with a local SQLite database file (photoapp.sqlite3) and three tables: users, albums, and photos. The application initializes the schema at startup (init_db) and opens per-request SQLite connections via get_conn() which sets row_factory=sqlite3.Row and executes PRAGMA foreign_keys=ON. Connections use timeout=30 to reduce transient lock failures.
Authentication and session handling:
- Registration stores username, display_name and a password hash produced by werkzeug.security.generate_password_hash (check_password_hash is used on login). Password hashes use Werkzeug’s default PBKDF2-based scheme.
- After successful login the user id is stored in the Flask session under 'user_id' and session.permanent is set; PERMANENT_SESSION_LIFETIME is configured to 7 days. SECRET_KEY is read from the environment (fallback "dev-secret-change-me").
Routing and authorization:
- current_user() reads session['user_id'] and returns a dict with id, username and display_name or None.
- Routes guard mutating operations by checking current_user and comparing usernames (for example uploads, album/photo deletion require the logged-in user to match the resource owner).
- Flash messages are used for user-facing error/success feedback; abort(404) or redirects are used for missing or unauthorized resources.
File storage and file-serving:
- Files are stored on disk under uploads/<username>/<album-slug>/<filename>. ensure_user_dir creates per-user directories.
- Album slugs are generated by slugify: remove non-word characters, trim, lowercase, collapse spaces/hyphens to single hyphens; if the result is empty a UUID fragment is used.
- Uploads validate file extension against a whitelist (png, jpg, jpeg, gif, webp) via allowed_file(), then sanitize filenames with werkzeug.utils.secure_filename.
- To avoid name collisions the code appends -N to the stem when a filename already exists.
- The /uploads/<path:filename> route performs a simple path-part check rejecting any request containing ".." and then serves files with send_from_directory. Photo records store a relative filepath like "username/slug/filename" in the photos table.
Database relationships and deletion semantics:
- albums has a UNIQUE(user_id, slug) constraint and a foreign key user_id -> users(id) ON DELETE CASCADE.
- photos has album_id -> albums(id) ON DELETE CASCADE.
- Deleting an album route deletes the album row (which cascades to photos) then removes the corresponding directory on disk with shutil.rmtree.
- Deleting a photo route deletes the file from disk (attempting unlink and ignoring exceptions) and then deletes the photo row.
Upload handling and limits:
- Flask app.config['MAX_CONTENT_LENGTH'] is set to 64 * 1024 * 1024 (64 MB) to limit request size.
- The album upload endpoint accepts multiple files (request.files.getlist("photos")) and iterates saving permitted files, inserting records into photos with filename and filepath, and commits once per request.
Templates and UI:
- HTML templates are rendered with render_template_string and use Bootstrap 5 via CDN. Template variables expect dictionaries from sqlite3.Row converted to dicts.
- The templates embed forms for registration, login, album creation, file upload, and deletion; deletion forms use POST and inline JavaScript confirm dialogs.
Utility functions:
- lcs_length and similarity_lcs implement an LCS-based similarity metric used by the /search endpoint to score users by username/display_name similarity. Search loads all users, computes similarity scores, boosts substring matches, filters results with a threshold, sorts by score and returns up to 50 entries.
Input validation and constraints:
- Username validation enforces the regex ^[A-Za-z0-9_.-]{3,30}$.
- Filenames are sanitized with secure_filename and stored as relative paths in the DB.
- The code uses try/except to catch sqlite3.IntegrityError for unique constraint violations (e.g., duplicate username or slug) and handles slug collisions by appending numeric suffixes in a loop.
Error handling and transactions:
- Database writes use explicit commit; IntegrityError is caught where uniqueness conflicts are expected. get_conn() returns a connection per use and connections are closed in finally blocks.
- File system operations (directory creation, file save, unlink, rmtree) are performed with exist checks and try/except around unlink; rmtree uses ignore_errors=True.
Configuration and constants:
- APP_ROOT is the script directory, UPLOAD_ROOT is APP_ROOT / "uploads". DB_PATH points to photoapp.sqlite3 in APP_ROOT. ALLOWED_EXT and MAX_CONTENT_LENGTH are defined at module level. The Flask app runs on host 0.0.0.0 port 5000 when executed as main with debug=False.
Behavior summary (concise):
- Users register/login; create albums (slug generated from title); upload multiple image files into uploads/<username>/<slug>/; photos and albums are recorded in SQLite with foreign keys; deletion routes remove DB records and corresponding files/directories; a search endpoint ranks users by LCS-based similarity of username/display_name.
"""


"""pip install Flask Werkzeug Jinja2 itsdangerous click markupsafe pillow"""





from flask import Flask, request, session, redirect, url_for, render_template_string, send_from_directory, flash, abort
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os
import re
import shutil
import uuid
from pathlib import Path
from datetime import timedelta

APP_ROOT = Path(__file__).parent.resolve()
UPLOAD_ROOT = APP_ROOT / "uploads"
DB_PATH = APP_ROOT / "photoapp.sqlite3"
SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret-change-me")
ALLOWED_EXT = {"png", "jpg", "jpeg", "gif", "webp"}
MAX_CONTENT_LENGTH = 64 * 1024 * 1024

UPLOAD_ROOT.mkdir(parents=True, exist_ok=True)

app = Flask(__name__)
app.secret_key = SECRET_KEY
app.config['MAX_CONTENT_LENGTH'] = MAX_CONTENT_LENGTH
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=7)

def get_conn():
    conn = sqlite3.connect(str(DB_PATH), timeout=30)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn

def init_db():
    conn = get_conn()
    try:
        cur = conn.cursor()
        cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          username TEXT NOT NULL UNIQUE,
          password_hash TEXT NOT NULL,
          display_name TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        """)
        cur.execute("""
        CREATE TABLE IF NOT EXISTS albums (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER NOT NULL,
          title TEXT NOT NULL,
          slug TEXT NOT NULL,
          description TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(user_id, slug),
          FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
        );
        """)
        cur.execute("""
        CREATE TABLE IF NOT EXISTS photos (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          album_id INTEGER NOT NULL,
          filename TEXT NOT NULL,
          filepath TEXT NOT NULL,
          uploaded_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY(album_id) REFERENCES albums(id) ON DELETE CASCADE
        );
        """)
        conn.commit()
    finally:
        conn.close()

init_db()

def allowed_file(filename):
    ext = filename.rsplit('.', 1)[-1].lower() if '.' in filename else ''
    return ext in ALLOWED_EXT

def slugify(text):
    s = re.sub(r'[^\w\s-]', '', text).strip().lower()
    s = re.sub(r'[-\s]+', '-', s)
    return s or str(uuid.uuid4())[:8]

def current_user():
    uid = session.get('user_id')
    if not uid:
        return None
    conn = get_conn()
    try:
        cur = conn.cursor()
        cur.execute("SELECT id, username, display_name FROM users WHERE id=?", (uid,))
        row = cur.fetchone()
        return dict(row) if row else None
    finally:
        conn.close()

def ensure_user_dir(username):
    p = UPLOAD_ROOT / username
    p.mkdir(parents=True, exist_ok=True)
    return p

@app.route("/uploads/<path:filename>")
def uploaded_file(filename):
    safe_path = Path(filename)
    if ".." in safe_path.parts:
        abort(400)
    full = UPLOAD_ROOT / safe_path
    if not full.exists():
        abort(404)
    return send_from_directory(str(full.parent), full.name)

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = (request.form.get("username") or "").strip()
        password = request.form.get("password") or ""
        display_name = (request.form.get("display_name") or "").strip() or username
        if not username or not password:
            flash("用户名和密码必填")
            return redirect(url_for('register'))
        if not re.match(r'^[A-Za-z0-9_.-]{3,30}$', username):
            flash("用户名规则不符合")
            return redirect(url_for('register'))
        pw_hash = generate_password_hash(password)
        conn = get_conn()
        try:
            cur = conn.cursor()
            try:
                cur.execute("INSERT INTO users (username, password_hash, display_name) VALUES (?,?,?)", (username, pw_hash, display_name))
                conn.commit()
            except sqlite3.IntegrityError:
                flash("用户名已存在")
                return redirect(url_for('register'))
        finally:
            conn.close()
        ensure_user_dir(username)
        flash("注册成功，请登录")
        return redirect(url_for('login'))
    return render_template_string(REG_TEMPLATE)

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = (request.form.get("username") or "").strip()
        password = request.form.get("password") or ""
        conn = get_conn()
        try:
            cur = conn.cursor()
            cur.execute("SELECT id, password_hash FROM users WHERE username=?", (username,))
            row = cur.fetchone()
            if not row or not check_password_hash(row["password_hash"], password):
                flash("用户名或密码错误")
                return redirect(url_for('login'))
            session['user_id'] = row["id"]
            session.permanent = True
        finally:
            conn.close()
        flash("登录成功")
        return redirect(url_for('index'))
    return render_template_string(LOGIN_TEMPLATE)

@app.route("/logout")
def logout():
    session.clear()
    flash("已登出")
    return redirect(url_for('index'))

@app.route("/")
def index():
    conn = get_conn()
    try:
        cur = conn.cursor()
        cur.execute("""
            SELECT a.id, a.title, a.slug, a.created_at, u.username, u.display_name
            FROM albums a JOIN users u ON a.user_id=u.id
            ORDER BY datetime(a.created_at) DESC
            LIMIT 12
        """)
        rows = cur.fetchall()
        recent = [dict(r) for r in rows]
    finally:
        conn.close()
    return render_template_string(INDEX_TEMPLATE, recent=recent, user=current_user())

# LCS and similarity utilities
def lcs_length(a: str, b: str) -> int:
    # classic DP LCS length, optimized for small strings
    la, lb = len(a), len(b)
    if la == 0 or lb == 0:
        return 0
    dp = [0] * (lb + 1)
    for i in range(1, la + 1):
        prev = 0
        ai = a[i-1]
        for j in range(1, lb + 1):
            temp = dp[j]
            if ai == b[j-1]:
                dp[j] = prev + 1
            else:
                dp[j] = dp[j] if dp[j] > dp[j-1] else dp[j-1]
            prev = temp
    return dp[lb]

def similarity_lcs(a: str, b: str) -> float:
    # normalize input and compute LCS-based similarity in [0,1]
    if not a and not b:
        return 1.0
    a2 = a.lower()
    b2 = b.lower()
    l = lcs_length(a2, b2)
    # normalize by average length to avoid bias toward long strings
    avg_len = (len(a2) + len(b2)) / 2
    if avg_len == 0:
        return 0.0
    return l / avg_len

@app.route("/search")
def search():
    q = (request.args.get("q") or "").strip()
    results = []
    if q:
        conn = get_conn()
        try:
            cur = conn.cursor()
            cur.execute("SELECT id, username, display_name FROM users")
            rows = cur.fetchall()
            entries = [dict(r) for r in rows]
        finally:
            conn.close()
        scored = []
        for e in entries:
            uname = e.get('username') or ''
            dname = e.get('display_name') or ''
            sim_u = similarity_lcs(q, uname) if uname else 0.0
            sim_d = similarity_lcs(q, dname) if dname else 0.0
            sim = max(sim_u, sim_d)
            # also boost exact substring matches slightly
            if q.lower() in uname.lower() or q.lower() in dname.lower():
                sim = max(sim, 0.6)
            if sim >= 0.15:
                e2 = dict(e)
                e2['similarity'] = round(sim, 4)
                scored.append(e2)
        scored.sort(key=lambda x: x['similarity'], reverse=True)
        results = scored[:50]
    return render_template_string(SEARCH_TEMPLATE, q=q, results=results, user=current_user())

@app.route("/u/<username>")
def user_page(username):
    conn = get_conn()
    try:
        cur = conn.cursor()
        cur.execute("SELECT id, username, display_name FROM users WHERE username=?", (username,))
        profile_row = cur.fetchone()
        if not profile_row:
            abort(404)
        profile = dict(profile_row)
        cur.execute("SELECT id, title, slug, description, created_at FROM albums WHERE user_id=? ORDER BY datetime(created_at) DESC", (profile['id'],))
        albums = [dict(r) for r in cur.fetchall()]
    finally:
        conn.close()
    return render_template_string(USER_TEMPLATE, profile=profile, albums=albums, user=current_user())

@app.route("/albums/create", methods=["GET", "POST"])
def create_album():
    user = current_user()
    if not user:
        flash("请先登录")
        return redirect(url_for('login'))
    if request.method == "POST":
        title = (request.form.get("title") or "").strip()
        description = (request.form.get("description") or "").strip()
        if not title:
            flash("标题不能为空")
            return redirect(url_for('create_album'))
        slug = slugify(title)
        conn = get_conn()
        try:
            cur = conn.cursor()
            base = slug
            i = 0
            while True:
                try:
                    cur.execute("INSERT INTO albums (user_id, title, slug, description) VALUES (?,?,?,?)", (user['id'], title, slug, description))
                    conn.commit()
                    break
                except sqlite3.IntegrityError:
                    i += 1
                    slug = f"{base}-{i}"
            new_id = cur.lastrowid
        finally:
            conn.close()
        ensure_user_dir(user['username'])
        album_dir = UPLOAD_ROOT / user['username'] / slug
        album_dir.mkdir(parents=True, exist_ok=True)
        flash("相册创建成功")
        return redirect(url_for('user_page', username=user['username']))
    return render_template_string(CREATE_ALBUM_TEMPLATE, user=current_user())

@app.route("/albums/<int:album_id>", methods=["GET", "POST"])
def view_album(album_id):
    conn = get_conn()
    try:
        cur = conn.cursor()
        cur.execute("SELECT a.*, u.username, u.display_name FROM albums a JOIN users u ON a.user_id=u.id WHERE a.id=?", (album_id,))
        row = cur.fetchone()
        if not row:
            abort(404)
        album = dict(row)
        cur.execute("SELECT id, filename, filepath, uploaded_at FROM photos WHERE album_id=? ORDER BY datetime(uploaded_at) DESC", (album_id,))
        photos = [dict(r) for r in cur.fetchall()]
    finally:
        conn.close()
    user = current_user()
    if request.method == "POST":
        if not user or user['username'] != album['username']:
            flash("无权限上传")
            return redirect(url_for('view_album', album_id=album_id))
        files = request.files.getlist("photos")
        if not files:
            flash("请选择文件")
            return redirect(url_for('view_album', album_id=album_id))
        saved = 0
        conn = get_conn()
        try:
            cur = conn.cursor()
            album_dir = UPLOAD_ROOT / album['username'] / album['slug']
            album_dir.mkdir(parents=True, exist_ok=True)
            for f in files:
                if f and allowed_file(f.filename):
                    fname = secure_filename(f.filename)
                    dest_name = fname
                    dest_path = album_dir / dest_name
                    k = 0
                    while dest_path.exists():
                        k += 1
                        stem = Path(fname).stem
                        suffix = Path(fname).suffix
                        dest_name = f"{stem}-{k}{suffix}"
                        dest_path = album_dir / dest_name
                    f.save(str(dest_path))
                    relpath = f"{album['username']}/{album['slug']}/{dest_name}"
                    cur.execute("INSERT INTO photos (album_id, filename, filepath) VALUES (?,?,?)", (album_id, dest_name, relpath))
                    saved += 1
            conn.commit()
        finally:
            conn.close()
        flash(f"上传 {saved} 张图片")
        return redirect(url_for('view_album', album_id=album_id))
    return render_template_string(ALBUM_TEMPLATE, album=album, photos=photos, user=user)

@app.route("/albums/<int:album_id>/delete", methods=["POST"])
def delete_album(album_id):
    user = current_user()
    if not user:
        flash("请先登录")
        return redirect(url_for('login'))
    conn = get_conn()
    try:
        cur = conn.cursor()
        cur.execute("SELECT a.*, u.username FROM albums a JOIN users u ON a.user_id=u.id WHERE a.id=?", (album_id,))
        row = cur.fetchone()
        if not row:
            flash("相册不存在")
            return redirect(url_for('index'))
        album = dict(row)
        if album['username'] != user['username']:
            flash("无权限删除")
            return redirect(url_for('user_page', username=album['username']))
        cur.execute("DELETE FROM albums WHERE id=?", (album_id,))
        conn.commit()
    finally:
        conn.close()
    album_dir = UPLOAD_ROOT / album['username'] / album['slug']
    if album_dir.exists():
        shutil.rmtree(album_dir, ignore_errors=True)
    flash("相册已删除")
    return redirect(url_for('user_page', username=album['username']))

@app.route("/photos/<int:photo_id>/delete", methods=["POST"])
def delete_photo(photo_id):
    user = current_user()
    if not user:
        flash("请先登录")
        return redirect(url_for('login'))
    conn = get_conn()
    try:
        cur = conn.cursor()
        cur.execute("SELECT p.*, a.slug, u.username FROM photos p JOIN albums a ON p.album_id=a.id JOIN users u ON a.user_id=u.id WHERE p.id=?", (photo_id,))
        row = cur.fetchone()
        if not row:
            flash("图片不存在")
            return redirect(url_for('index'))
        photo = dict(row)
        if photo['username'] != user['username']:
            flash("无权限删除")
            return redirect(url_for('view_album', album_id=photo['album_id']))
        fp = UPLOAD_ROOT / photo['filepath']
        if fp.exists():
            try:
                fp.unlink()
            except Exception:
                pass
        cur.execute("DELETE FROM photos WHERE id=?", (photo_id,))
        conn.commit()
    finally:
        conn.close()
    flash("图片已删除")
    return redirect(url_for('view_album', album_id=photo['album_id']))

@app.route("/photos/<int:photo_id>")
def photo_page(photo_id):
    conn = get_conn()
    try:
        cur = conn.cursor()
        cur.execute("""
            SELECT p.id, p.filename, p.filepath, p.uploaded_at,
                   a.id as album_id, a.slug, a.title, u.username, u.display_name
            FROM photos p
            JOIN albums a ON p.album_id=a.id
            JOIN users u ON a.user_id=u.id
            WHERE p.id=?
        """, (photo_id,))
        row = cur.fetchone()
        if not row:
            abort(404)
        photo = dict(row)
    finally:
        conn.close()
    return render_template_string(PHOTO_TEMPLATE, photo=photo, user=current_user())

# --- Templates with Bootstrap + custom colors + search button in navbar ---
# Colors: background RGB(128,0,0) (dark red), accent RGB(192,60,0) (goldish)
BASE_HEAD = """
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
  :root{
    --bg-color: rgb(128,0,0);
    --accent-color: rgb(192,60,0);
    --card-bg: rgba(255,255,255,0.95);
    --muted: rgba(0,0,0,0.6);
  }
  body{
    background: linear-gradient(180deg, var(--bg-color), #5a0000);
    min-height:100vh;
    color: #fff;
  }
  .site-container{padding-top:1rem;padding-bottom:2rem;}
  .topbar{
    background: linear-gradient(90deg, rgba(255,255,255,0.03), rgba(0,0,0,0.03));
    border-bottom: 1px solid rgba(255,255,255,0.06);
    padding:0.5rem 1rem;
  }
  .brand{
    color: #fff;
    font-weight:600;
    letter-spacing:0.5px;
  }
  .accent-btn{
    background: var(--accent-color);
    border-color: rgba(0,0,0,0.12);
    color: #fff;
  }
  .card-custom{
    background: var(--card-bg);
    color: #000;
    border: none;
    box-shadow: 0 6px 18px rgba(0,0,0,0.35);
  }
  .small-muted{color: var(--muted) !important;}
  a.btn-link{color: #fff;}
  .search-input{min-width: 260px;}
  footer{margin-top:2rem;color:rgba(255,255,255,0.6);}
</style>
"""

REG_TEMPLATE = f"""
<!doctype html>
<html lang="zh">
<head>{BASE_HEAD}<title>注册</title></head>
<body>
<div class="container site-container">
  <div class="topbar d-flex justify-content-between align-items-center mb-4">
    <div class="brand">PhotoSite</div>
    <form class="d-flex" action="/search" method="get">
      <input name="q" class="form-control form-control-sm me-2 search-input" placeholder="搜索用户名或显示名">
      <button class="btn btn-sm accent-btn" type="submit">搜索</button>
    </form>
  </div>
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card card-custom p-4">
        <h4 class="mb-3">创建账户</h4>
        <form method="post">
          <div class="mb-3"><label class="form-label">用户名</label><input class="form-control" name="username" required></div>
          <div class="mb-3"><label class="form-label">显示名</label><input class="form-control" name="display_name"></div>
          <div class="mb-3"><label class="form-label">密码</label><input class="form-control" type="password" name="password" required></div>
          <div class="d-flex justify-content-between">
            <button class="btn accent-btn">注册</button>
            <a class="btn btn-outline-light" href="/login">已有账号？登录</a>
          </div>
        </form>
      </div>
      <div class="mt-3 text-center small-muted">注册即表示接受使用条款</div>
    </div>
  </div>
  <footer class="text-center">PhotoSite &copy; 2025</footer>
</div>
</body>
</html>
"""

LOGIN_TEMPLATE = f"""
<!doctype html>
<html lang="zh">
<head>{BASE_HEAD}<title>登录</title></head>
<body>
<div class="container site-container">
  <div class="topbar d-flex justify-content-between align-items-center mb-4">
    <div class="brand">PhotoSite</div>
    <form class="d-flex" action="/search" method="get">
      <input name="q" class="form-control form-control-sm me-2 search-input" placeholder="搜索用户名或显示名">
      <button class="btn btn-sm accent-btn" type="submit">搜索</button>
    </form>
  </div>
  <div class="row justify-content-center">
    <div class="col-md-5">
      <div class="card card-custom p-4">
        <h4 class="mb-3">登录</h4>
        <form method="post">
          <div class="mb-3"><label class="form-label">用户名</label><input class="form-control" name="username" required></div>
          <div class="mb-3"><label class="form-label">密码</label><input class="form-control" type="password" name="password" required></div>
          <div class="d-flex justify-content-between">
            <button class="btn accent-btn">登录</button>
            <a class="btn btn-outline-light" href="/register">注册新账号</a>
          </div>
        </form>
      </div>
      <div class="mt-3 text-center small-muted">为了更好的体验，请使用桌面或平板浏览器</div>
    </div>
  </div>
  <footer class="text-center">PhotoSite &copy; 2025</footer>
</div>
</body>
</html>
"""

INDEX_TEMPLATE = f"""
<!doctype html>
<html lang="zh">
<head>{BASE_HEAD}<title>首页</title></head>
<body>
<div class="container site-container">
  <div class="topbar d-flex justify-content-between align-items-center mb-4">
    <div class="brand">PhotoSite</div>
    <form class="d-flex" action="/search" method="get">
      <input name="q" class="form-control form-control-sm me-2 search-input" placeholder="搜索用户名或显示名">
      <button class="btn btn-sm accent-btn" type="submit">搜索</button>
    </form>
    <div>
      {{% if user %}}
        <span class="me-2">{{{{ user.display_name or user.username }}}}</span>
        <a class="btn btn-sm btn-light" href="/albums/create">创建相册</a>
        <a class="btn btn-sm btn-outline-light" href="/logout">登出</a>
      {{% else %}}
        <a class="btn btn-sm btn-light" href="/login">登录</a>
        <a class="btn btn-sm btn-outline-light" href="/register">注册</a>
      {{% endif %}}
    </div>
  </div>

  <div class="mb-3 text-white-50"><h4>最新相册</h4></div>
  <div class="row">
    {{% for a in recent %}}
      <div class="col-md-3 mb-3">
        <div class="card card-custom">
          <div class="card-body">
            <h5 class="card-title">{{{{ a.title }}}}</h5>
            <p class="card-text small-muted">by <a href="/u/{{{{ a.username }}}}">{{{{ a.display_name or a.username }}}}</a></p>
            <a class="btn btn-sm accent-btn" href="/albums/{{{{ a.id }}}}">查看相册</a>
          </div>
        </div>
      </div>
    {{% else %}}
      <p class="text-white-50">暂无相册</p>
    {{% endfor %}}
  </div>

  <footer class="text-center mt-4">PhotoSite &copy; 2025</footer>
</div>
</body>
</html>
"""

SEARCH_TEMPLATE = f"""
<!doctype html>
<html lang="zh">
<head>{BASE_HEAD}<title>搜索</title></head>
<body>
<div class="container site-container">
  <div class="topbar d-flex justify-content-between align-items-center mb-4">
    <div class="brand">PhotoSite</div>
    <form class="d-flex" action="/search" method="get">
      <input name="q" value="{{{{ q }}}}" class="form-control form-control-sm me-2 search-input" placeholder="搜索用户名或显示名">
      <button class="btn btn-sm accent-btn" type="submit">搜索</button>
    </form>
    <div>
      {{% if user %}}
        <span class="me-2">{{{{ user.display_name or user.username }}}}</span>
        <a class="btn btn-sm btn-light" href="/albums/create">创建相册</a>
        <a class="btn btn-sm btn-outline-light" href="/logout">登出</a>
      {{% else %}}
        <a class="btn btn-sm btn-light" href="/login">登录</a>
      {{% endif %}}
    </div>
  </div>

  <div class="card card-custom p-3 mb-3">
    <h5 class="mb-2">搜索结果: "{{{{ q }}}}"</h5>
    {{% if results %}}
      <ul class="list-group">
      {{% for r in results %}}
        <li class="list-group-item d-flex justify-content-between align-items-center">
          <div>
            <a href="/u/{{{{ r.username }}}}">{{{{ r.display_name or r.username }}}}</a>
            <div class="small-muted">{{{{ r.username }}}}</div>
          </div>
          <div class="text-end">
            <div class="badge bg-warning text-dark">相似度: {{{{ (r.similarity * 100)|round(1) }}}}%</div>
          </div>
        </li>
      {{% endfor %}}
      </ul>
    {{% else %}}
      <p class="small-muted">未找到匹配用户</p>
    {{% endif %}}
  </div>

  <a class="btn btn-outline-light" href="/">返回首页</a>
  <footer class="text-center mt-4">PhotoSite &copy; 2025</footer>
</div>
</body>
</html>
"""

USER_TEMPLATE = f"""
<!doctype html>
<html lang="zh">
<head>{BASE_HEAD}<title>{{{{ profile.display_name or profile.username }}}}</title></head>
<body>
<div class="container site-container">
  <div class="topbar d-flex justify-content-between align-items-center mb-4">
    <div class="brand">PhotoSite</div>
    <form class="d-flex" action="/search" method="get">
      <input name="q" class="form-control form-control-sm me-2 search-input" placeholder="搜索用户名或显示名">
      <button class="btn btn-sm accent-btn" type="submit">搜索</button>
    </form>
    <div>
      {{% if user %}}
        <span class="me-2">{{{{ user.display_name or user.username }}}}</span>
        <a class="btn btn-sm btn-light" href="/albums/create">创建相册</a>
        <a class="btn btn-sm btn-outline-light" href="/logout">登出</a>
      {{% else %}}
        <a class="btn btn-sm btn-light" href="/login">登录</a>
      {{% endif %}}
    </div>
  </div>

  <div class="card card-custom p-3 mb-3">
    <div class="d-flex justify-content-between align-items-center">
      <div>
        <h4>{{{{ profile.display_name or profile.username }}}}</h4>
        <div class="small-muted">{{{{ profile.username }}}}</div>
      </div>
      {{% if user and user.username==profile.username %}}
        <a class="btn accent-btn" href="/albums/create">创建相册</a>
      {{% endif %}}
    </div>
  </div>

  <div class="row">
    {{% for a in albums %}}
      <div class="col-md-4 mb-3">
        <div class="card card-custom">
          <div class="card-body">
            <h5>{{{{ a.title }}}}</h5>
            <p class="small-muted">{{{{ a.created_at }}}}</p>
            <a class="btn btn-sm accent-btn" href="/albums/{{{{ a.id }}}}">查看</a>
            {{% if user and user.username==profile.username %}}
              <form method="post" action="/albums/{{{{ a.id }}}}/delete" style="display:inline" onsubmit="return confirm('确认删除？')"><button class="btn btn-sm btn-danger">删除</button></form>
            {{% endif %}}
          </div>
        </div>
      </div>
    {{% else %}}
      <p class="text-white-50">暂无相册</p>
    {{% endfor %}}
  </div>

  <a class="btn btn-outline-light" href="/">返回首页</a>
  <footer class="text-center mt-4">PhotoSite &copy; 2025</footer>
</div>
</body>
</html>
"""

CREATE_ALBUM_TEMPLATE = f"""
<!doctype html>
<html lang="zh">
<head>{BASE_HEAD}<title>创建相册</title></head>
<body>
<div class="container site-container">
  <div class="topbar d-flex justify-content-between align-items-center mb-4">
    <div class="brand">PhotoSite</div>
    <form class="d-flex" action="/search" method="get">
      <input name="q" class="form-control form-control-sm me-2 search-input" placeholder="搜索用户名或显示名">
      <button class="btn btn-sm accent-btn" type="submit">搜索</button>
    </form>
    <div>
      {{% if user %}}
        <span class="me-2">{{{{ user.display_name or user.username }}}}</span>
      {{% endif %}}
    </div>
  </div>

  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card card-custom p-4">
        <h4 class="mb-3">创建相册</h4>
        <form method="post">
          <div class="mb-3"><label class="form-label">标题</label><input class="form-control" name="title" required></div>
          <div class="mb-3"><label class="form-label">描述</label><textarea class="form-control" name="description"></textarea></div>
          <div class="d-flex justify-content-between">
            <button class="btn accent-btn">创建</button>
            <a class="btn btn-outline-light" href="/">取消</a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <footer class="text-center mt-4">PhotoSite &copy; 2025</footer>
</div>
</body>
</html>
"""

ALBUM_TEMPLATE = f"""
<!doctype html>
<html lang="zh">
<head>{BASE_HEAD}<title>{{{{ album.title }}}}</title><style>.thumb{{width:100%;height:200px;object-fit:cover}}.modal-img{{max-width:100%;height:auto}}</style></head>
<body>
<div class="container site-container">
  <div class="topbar d-flex justify-content-between align-items-center mb-4">
    <div class="brand">PhotoSite</div>
    <form class="d-flex" action="/search" method="get">
      <input name="q" class="form-control form-control-sm me-2 search-input" placeholder="搜索用户名或显示名">
      <button class="btn btn-sm accent-btn" type="submit">搜索</button>
    </form>
    <div>
      {{% if user %}}
        <span class="me-2">{{{{ user.display_name or user.username }}}}</span>
      {{% endif %}}
    </div>
  </div>

  <div class="d-flex justify-content-between align-items-center mb-3">
    <div>
      <h3 class="text-white">{{{{ album.title }}}}</h3>
      <div class="small-muted">by <a href="/u/{{{{ album.username }}}}">{{{{ album.display_name or album.username }}}}</a></div>
    </div>
    {{% if user and user.username==album.username %}}
      <form method="post" enctype="multipart/form-data" class="d-flex">
        <input class="form-control form-control-sm me-2" type="file" name="photos" accept="image/*" multiple required>
        <button class="btn btn-sm accent-btn">上传</button>
      </form>
    {{% endif %}}
  </div>

  <div class="row">
    {{% for p in photos %}}
      <div class="col-md-3 mb-3">
        <div class="card card-custom">
          <a href="/photos/{{{{ p.id }}}}"><img src="/uploads/{{{{ p.filepath }}}}" class="thumb card-img-top" alt="{{{{ p.filename }}}}"></a>
          <div class="card-body">
            <p class="small text-truncate">{{{{ p.filename }}}}</p>
            <p class="small-muted">{{{{ p.uploaded_at }}}}</p>
            {{% if user and user.username==album.username %}}
              <form method="post" action="/photos/{{{{ p.id }}}}/delete" onsubmit="return confirm('确认删除？')"><button class="btn btn-sm btn-danger">删除</button></form>
            {{% else %}}
              <a class="btn btn-sm accent-btn" href="/photos/{{{{ p.id }}}}">查看大图</a>
            {{% endif %}}
          </div>
        </div>
      </div>
    {{% else %}}
      <p class="text-white-50">相册暂无图片</p>
    {{% endfor %}}
  </div>

  <a class="btn btn-outline-light" href="/u/{{{{ album.username }}}}">返回用户主页</a>
  <footer class="text-center mt-4">PhotoSite &copy; 2025</footer>
</div>
</body>
</html>
"""

PHOTO_TEMPLATE = f"""
<!doctype html>
<html lang="zh">
<head>{BASE_HEAD}<title>{{{{ photo.filename }}}}</title></head>
<body>
<div class="container site-container">
  <div class="topbar d-flex justify-content-between align-items-center mb-4">
    <div class="brand">PhotoSite</div>
    <form class="d-flex" action="/search" method="get">
      <input name="q" class="form-control form-control-sm me-2 search-input" placeholder="搜索用户名或显示名">
      <button class="btn btn-sm accent-btn" type="submit">搜索</button>
    </form>
    <div>
      {{% if user %}}
        <span class="me-2">{{{{ user.display_name or user.username }}}}</span>
      {{% endif %}}
    </div>
  </div>

  <div class="mb-3">
    <a class="btn btn-outline-light" href="/albums/{{{{ photo.album_id }}}}">返回相册</a>
    {{% if user and user.username==photo.username %}}
      <form method="post" action="/photos/{{{{ photo.id }}}}/delete" style="display:inline" onsubmit="return confirm('确认删除？')"><button class="btn btn-danger">删除</button></form>
    {{% endif %}}
  </div>

  <div class="text-center">
    <img src="/uploads/{{{{ photo.filepath }}}}" class="img-fluid" alt="{{{{ photo.filename }}}}">
    <h5 class="mt-3 text-white">{{{{ photo.filename }}}}</h5>
    <p class="small-muted">{{{{ photo.uploaded_at }}}}</p>
  </div>

  <footer class="text-center mt-4">PhotoSite &copy; 2025</footer>
</div>
</body>
</html>
"""

if __name__ == "__main__":
    app.run(debug=False, host="0.0.0.0", port=5000)
